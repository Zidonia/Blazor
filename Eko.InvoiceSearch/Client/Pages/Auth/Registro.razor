@page "/Registro"
@inject IRepositorios repositorio
@inject NavigationManager navigationManager
@inject ILoginService loginService
@inject NotificationService NotificationService

<h3>Registro</h3>

<EditForm Model="userInfo" OnValidSubmit="CrearUsuario">
	<DataAnnotationsValidator/>
		<div class="form-group">
			<label>
				Email:
			</label>
			<div>
				<InputText class="form-control" @bind-Value=@userInfo.email></InputText>
				<ValidationMessage For="@(()=> userInfo.email)"></ValidationMessage>
			</div>
		</div>
		<div class="form-group">
			<label>
				Password:
			</label>
			<div>
				<InputPassword class="form-control" @bind-Value=@userInfo.password></InputPassword>
				<ValidationMessage For="@(()=> userInfo.password)"></ValidationMessage>
			</div>
		</div>
		<button type="submit" class="btn btn-primary">Registrar</button>
</EditForm>

@code {
	private UserInfo userInfo = new UserInfo();
	private Notificacion notificacion = new Notificacion();
	private async Task CrearUsuario()
	{
		//UserInfo es lo que mandamos y el UserToken es lo que vamos a recibir
		var responseHTTP = await repositorio.Post<UserInfo, UserToken>("api/cuentas/crear", new UserInfo { email = userInfo.email, password = userInfo.password});

		if (responseHTTP.Error)
		{
			NotificationService.Notify(notificacion.MensajeError(responseHTTP.responseMessage.StatusCode.ToString()));
			Console.WriteLine($"{responseHTTP.responseMessage}");
		}
		else
		{
			//Se procede a guardar el token en local storage
			await loginService.Login(responseHTTP.Response!);
			navigationManager.NavigateTo("");
		}
	}
}
